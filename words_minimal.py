# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_window_minimal.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QFileDialog
import sqlite3
import sys
import pandas as pd


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(807, 567)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget_2.setGeometry(QtCore.QRect(130, 90, 535, 50))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.text_lay = QtWidgets.QHBoxLayout(self.layoutWidget_2)
        self.text_lay.setContentsMargins(0, 0, 0, 0)
        self.text_lay.setObjectName("text_lay")
        self.txt_ru = QtWidgets.QLineEdit(self.layoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.txt_ru.setFont(font)
        self.txt_ru.setObjectName("txt_ru")
        self.text_lay.addWidget(self.txt_ru)
        self.txt_pl = QtWidgets.QLineEdit(self.layoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.txt_pl.setFont(font)
        self.txt_pl.setObjectName("txt_pl")
        self.text_lay.addWidget(self.txt_pl)
        self.btn_rand = QtWidgets.QPushButton(self.centralwidget)
        self.btn_rand.setGeometry(QtCore.QRect(290, 170, 175, 34))
        self.btn_rand.setObjectName("btn_rand")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 807, 30))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.open_DB = QtWidgets.QAction(MainWindow)
        self.open_DB.setObjectName("open_DB")
        self.menu.addAction(self.open_DB)
        self.menubar.addAction(self.menu.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btn_rand.setText(_translate("MainWindow", "Random"))
        self.menu.setTitle(_translate("MainWindow", "Menu"))
        self.open_DB.setText(_translate("MainWindow", "open DB"))

class GUIWords(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

class GUIWordsCtr:
    def __init__(self, view, logic):
        self._view = view
        self._logic = logic
        self._connectSignals()

    def _connectSignals(self):
        self._view.btn_rand.clicked.connect(self._print)
        self._view.open_DB.triggered.connect(self._open_DB)

    def _print(self):
        self.setDisplayText(self._logic.print())

    def _open_DB(self):
        self.file_DB = QFileDialog.getOpenFileName(self._view, 'Choose SQlite3 file', '', 'SQlite3 (*.s3db)')
        self._logic.open_sql_db(self.file_DB[0])
        self.setDisplayText(self._logic.print())
    
    def setDisplayText(self, row):
        self._view.txt_ru.setText(row.ru)
        self._view.txt_pl.setText(row.pl)

class Dictionary:

    # store pairs of words
    # can add or print a pair of words
    # parse input and check if correct
    def __init__(self):
        self.db = pd.DataFrame(columns=['ru', 'pl', 'try_n', 'fail_n'])
    
    def open_sql_db(self, file):
        db_file = sqlite3.connect(file)
        self.db = pd.read_sql_query("SELECT * FROM dic", db_file)

    def print(self, line_no=10):
        row = self.db.iloc[line_no]
        return row


app = QApplication([])
view = GUIWords()
view.show()
logic = Dictionary()
GUIWordsCtr(view, logic)
sys.exit(app.exec())